import { useEffect } from 'react';
import { supabase } from '@/integrations/supabase/client';
import { useAuth } from '@/hooks/useAuth';
import { toast } from '@/hooks/use-toast';
import { useNavigate } from 'react-router-dom';

export const useSessionManager = () => {
  const { logout, user } = useAuth();
  const navigate = useNavigate();

  useEffect(() => {
    if (!user) return;

    // Para sistema customizado, vamos ser menos rigoroso com a sessÃ£o Supabase
    // e focar apenas no localStorage
    const checkCustomSession = () => {
      const savedUser = localStorage.getItem('currentUser');
      
      if (!savedUser) {
        console.log('ðŸ”’ SessÃ£o customizada nÃ£o encontrada no localStorage');
        handleSessionExpired();
        return;
      }

      try {
        const parsedUser = JSON.parse(savedUser);
        if (!parsedUser.id || !parsedUser.email) {
          console.log('ðŸ”’ Dados do usuÃ¡rio invÃ¡lidos no localStorage');
          handleSessionExpired();
          return;
        }
        
        console.log('âœ… SessÃ£o customizada vÃ¡lida:', parsedUser.email);
      } catch (error) {
        console.log('ðŸ”’ Erro ao parsear usuÃ¡rio do localStorage');
        handleSessionExpired();
      }
    };

    const handleSessionExpired = () => {
      console.log('ðŸ”’ Fazendo logout automÃ¡tico devido Ã  sessÃ£o expirada');
      logout();
      
      // Redirecionamento para login apÃ³s um pequeno delay
      setTimeout(() => {
        navigate('/login');
        toast({
          title: "SessÃ£o Expirada",
          description: "Sua sessÃ£o expirou. FaÃ§a login novamente.",
          variant: "destructive",
        });
      }, 100);
    };

    // VerificaÃ§Ã£o inicial
    checkCustomSession();

    // Verificar a cada 5 minutos (menos frequente para evitar interferÃªncias)
    const interval = setInterval(checkCustomSession, 300000);

    // Listener simplificado para mudanÃ§as de estado de auth do Supabase
    const { data: { subscription } } = supabase.auth.onAuthStateChange(
      (event, session) => {
        console.log('ðŸ”„ Supabase auth state changed:', event);
        
        // SÃ³ agir em casos especÃ­ficos de logout explÃ­cito
        if (event === 'SIGNED_OUT' && !localStorage.getItem('currentUser')) {
          handleSessionExpired();
        }
      }
    );

    return () => {
      clearInterval(interval);
      subscription.unsubscribe();
    };
  }, [user, logout, navigate]);
};